/////////////////////////////////////////////////////////////////////
//
// JS module for iCloud for Windows status window
//
// Copyright (C) 2015 Apple, Inc. All Rights Reserved.
//
/////////////////////////////////////////////////////////////////////
// !module:mms_config

//
// Behavior flags (probably don't want to tinker with these)
//

// Run tests on startup
var MMSJS_ENABLE_TESTS = 0;

// Enable override of app interface methods that are unimplemented
var MMSJS_ENABLE_PSEUDO_INTERFACES = 0;

// Use a polling timer to update the UI instead of relying on the
// host to call in when the state changes
var MMSJS_POLLING_TIMER_INTERVAL = 5000;
var MMSJS_ENABLE_POLLING_TIMER = 1;

// Enable/disable logging
var MMSJS_ENABLE_LOGGING = 0;


// !module:mms_constants

/////////////////////////////////////////////////////////////////////
// Constants
/////////////////////////////////////////////////////////////////////
var kViewIdentifierLogin = "login_view_container";	// The login screen
var kViewIdentifierMain = "main_view_container";	// The main screen
var kContainerIdentifierContent = "content_container";

var kButtonIdentifierNone = 0;
var kButtonIdentifierWeb = kButtonIdentifierNone + 1;					// The "Go to iCloud.com" button
var kButtonIdentifierSettings = kButtonIdentifierWeb + 1;				// The "Open iCloud Settings" button
var kButtonIdentifierSignIn = kButtonIdentifierSettings + 1;			// "Sign In" button

var kCurrentViewData = "currentViewData";
var kServiceEntryData = "serviceEntryData";
var kAlertEntryData = "alertEntryData";

var kEntryTypeNone = "none";
var kEntryTypeAlert = "alertEntry";
var kEntryTypeService = "serviceEntry";

var kAttribDirection = "direction";
var kAttribValueDirectionRTL = "rtl";
var kAttribValueDirectionLTR = "ltr";

var kInvalidIdentifier = 0;

var kServiceIdentifierNone   = 0;
var kServiceIdentifierPhotos = kServiceIdentifierNone + 1;
var kServiceIdentifierDrive  = kServiceIdentifierPhotos + 1;

var kAlertIdentifierNone = 0;
var kAlertIdentifierCloudStorage = kAlertIdentifierNone + 1;
var kAlertIdentifierLocalStorage = kAlertIdentifierCloudStorage + 1;
var kAlertIdentifierPhotosExit = kAlertIdentifierLocalStorage + 1;
var kAlertIdentifierUpgradeRequired = kAlertIdentifierPhotosExit + 1;
var kAlertIdentifierAppStoreVersionAvailable = kAlertIdentifierUpgradeRequired + 1;
var kAlertIdentifierQuarkUpgradeRequired = kAlertIdentifierAppStoreVersionAvailable + 1

var kWebServiceNameNone = "none";
var kWebServiceNamePhotos = "photos";
/* Copyright (C) 2016 Apple, Inc. All Rights Reserved */ 
/* This file was automatically generated by mmsjs_locgen.cmd on Tue 09/28/2021 at 12:35:03.00 */ 
 
 
/* begin */ 
var MMS_JS_LOC_ITEM_SINGULAR = 3001;	// Item 
var MMS_JS_LOC_ITEMS_PLURAL = 3002;	// Items 
var MMS_JS_LOC_MINUTE_SINGULAR = 3003;	// Minute 
var MMS_JS_LOC_MINUTES_PLURAL = 3004;	// Minutes 
var MMS_JS_LOC_HOUR_SINGULAR = 3005;	// Hour 
var MMS_JS_LOC_HOURS_PLURAL = 3006;	// Hours 
var MMS_JS_LOC_DAY_SINGULAR = 3007;	// Day 
var MMS_JS_LOC_DAYS_PLURAL = 3008;	// Days 
var MMS_JS_LOC_TODAY = 3009;	// Today 
var MMS_JS_LOC_YESTERDAY = 3010;	// Yesterday 
var MMS_JS_LOC_ICLOUD_COM = 3011;	// Go to iCloud.com 
var MMS_JS_LOC_OPEN_SETTINGS = 3012;	// Open iCloud Settings 
var MMS_JS_LOC_UPDATED_JUST_NOW = 3013;	// Updated Just Now 
var MMS_JS_LOC_UPDATED_MINUTES = 3014;	// Updated %0 %1 Ago 
var MMS_JS_LOC_UPDATED_SPECIFICDAY = 3015;	// Updated %0 at %1 
var MMS_JS_LOC_UPDATING_NOW = 3016;	// Updating... 
var MMS_JS_LOC_UPLOAD_N = 3017;	// Uploading %0 %1 
var MMS_JS_LOC_DOWNLOAD_N = 3018;	// Downloading %0 %1 
var MMS_JS_LOC_BOTH_N = 3019;	// Uploading %0 %1 � Downloading %2 %3 
var MMS_JS_LOC_UPDATE_FAIL = 3020;	// Unable to Update � %0 %1 pending 
var MMS_JS_LOC_UPDATE_FAIL_DAYS = 3021;	// Unable to Update for %0 %1 � %2 %3 pending 
var MMS_JS_LOC_VIEW_ICLOUD_COM = 3022;	// View on iCloud.com 
var MMS_JS_LOC_PC_FULL = 3023;	// Your PC is full. 
var MMS_JS_LOC_PC_FULL_DETAIL = 3024;	// Photos, videos, documents, and data are no longer updating. 
var MMS_JS_LOC_DOWNLOAD_ICPL = 3025;	// Download Photos 
var MMS_JS_LOC_UPLOAD_ICPL = 3026;	// Upload Photos 
var MMS_JS_LOC_EXIT_ICPL = 3027;	// iCloud Photos has been disabled. 
var MMS_JS_LOC_EXIT_ICPL_DETAIL = 3028;	// Photos and videos will be deleted in %0 %1. <span>Download your library</span> before then. 
var MMS_JS_LOC_UPGRADE_REQUIRED = 3029;	// Upgrade Required 
var MMS_JS_LOC_UPGRADE_REQUIRED_DETAIL = 3030;	// iCloud for Windows needs to be upgraded %0. <span>Download the latest version.</span> 
var MMS_JS_LOC_BR_UPGRADE_REQUIRED_DETAIL = 3031;	// to continue syncing documents in iCloud Drive 
var MMS_JS_LOC_OPEN_BR = 3032;	// Open iCloud Drive 
var MMS_JS_LOC_ICPL = 3033;	// iCloud Photos 
var MMS_JS_LOC_BR = 3034;	// iCloud Drive 
var MMS_JS_LOC_SIGN_IN = 3035;	// Sign In 
var MMS_JS_LOC_SIGN_IN_DETAIL = 3036;	// Sign in with your Apple ID to start using iCloud. 
var MMS_JS_LOC_INITIALIZING = 3037;	// Initializing... 
var MMS_JS_LOC_INITIALIZING_N = 3038;	// Initializing � %0 %1 pending 
var MMS_JS_LOC_APP_STORE_VERSION_AVAILABLE = 3039;	// New Version Available 
var MMS_JS_LOC_APP_STORE_VERSION_AVAILABLE_DETAIL = 3040;	// A new version of iCloud for Windows is now available on the <span>Microsoft Store</span>. 
var MMS_JS_LOC_OPEN_ICPL = 3041;	// Open iCloud Photos 
var MMS_JS_LOC_QUARK_UPGRADE_REQUIRED_DETAIL = 3042;	// to continue syncing iCloud Photos 
/* end */ 
/* This file was automatically generated by mmsjs_locgen.cmd on Tue 09/28/2021 at 12:35:06.76 */ 


// !module:mms_locale
// !dependency:mms_constants

function getClassSuffixForLocale() {
	return (mmsCoreImpl.isLocaleRTL() ? "_rtl" : "_ltr");
}

function setDirectionForLocale(elem) {
	if (elem && elem.length) {
		if (mmsCoreImpl.isLocaleRTL()) {
			elem.css(kAttribDirection, kAttribValueDirectionRTL);
		} else {
			elem.css(kAttribDirection, kAttribValueDirectionLTR);
		}
	}
}

function getClassForLocale(classPrefix) {
	return classPrefix + getClassSuffixForLocale();
}


// !module:mms_appinterfaces
// !dependency:mms_config

// Wraps all methods that should be implemented by mmsCore.
//
// Due to timing issues, the object may or may not be instantiated when
// we would try to replace any missing methods during page load.

// Additionally, some functions may not be implemented (e.g. when running in a browser for testing).
//
// If a method is called and it does not exist on mmsCore, the
// pseudo interface method is used instead.

var mmsCoreImpl = {
	log: function(message) {
		// Special case for log
		return this.safeLog(message);
	},
	getLocalizedString: function(id) {
		var name = "getLocalizedString";
		return this.pseudoMethodHelper(name, arguments, function() {
			switch (id)
			{
				default:
				return id.toString();
			}
		});
	},
	setViewportHeight: function(height) {
		var name = "setViewportHeight";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	isUserSignedIn: function() {
		var name = "isUserSignedIn";
		return this.pseudoMethodHelper(name, arguments, function() {
			return true;
		});			
	},
	isLocaleRTL: function() {
		var name = "isLocaleRTL";
		return this.pseudoMethodHelper(name, arguments, function() {
			return false;
		});	
	},
	isServiceEnabled: function(serviceId) {
		var name = "isServiceEnabled";
		return this.pseudoMethodHelper(name, arguments, function() {
			return true;
		});
	},
	getServiceStatusString: function(serviceId) {
		var name = "getServiceStatusString";
		return this.pseudoMethodHelper(name, arguments, function(serviceId) {
			return "Fake status string for service: " + serviceId;
		});
	},
	getAlertDetails: function(/*id*/) {
		var name = "getAlertDetails";
		return this.pseudoMethodHelper(name, arguments, function(/*id*/) {
			var fake = {
				title: "Test alert title",
				message: "Test alert message detail text.",
				buttons: [
					{
						id: "btn_1",
						title: "Button 1",
						default: true
					},
					{
						id: "btn_2",
						title: "Button 2",
						default: false
					}
				]
			};
			return fake;
		});
	},
	doDownloadPhotos: function() {
		var name = "doDownloadPhotos";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	/*
	doUploadPhotos: function() {
		var name = "doUploadPhotos";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	*/
	doOpenCastleWeb: function(service) {
		var name = "doOpenCastleWeb";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	doOpenUpgradeiCloudWeb: function() {
		var name = "doOpenUpgradeiCloudWeb";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	doOpenAppStore: function() {
		var name = "doOpenAppStore";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	doOpenCastlePref: function(withManageStorage) {
		var name = "doOpenCastlePref";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	alertButtonWasClicked: function(/*alertId,*/ buttonId) {
		var name = "alertButtonWasClicked";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	doOpenPhotosFolder: function() {
		var name = "doOpenPhotosFolder";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	doOpenDriveFolder: function() {
		var name = "doOpenDriveFolder";
		return this.pseudoMethodHelper(name, arguments, function() {
			return null;
		});
	},
	safeLogPseudoCall: function(method, _arguments) {
		this.safeLog("Pseduo call: mmsCore." + method + " with " + _arguments + " args")
	},
	pseudoMethodHelper: function(name, _arguments, fn) {
		var retval = {
			called: false,
			fromApp: {},
		};
		retval = this.callIfImplemented(name, _arguments);
		if (!retval.called) {
			this.safeLogPseudoCall(name, _arguments.length);
			return fn.apply(fn, _arguments);
		} else {
			return retval.fromApp;
		}
	},	
	callIfImplemented: function(methodName, _arguments) {
		var retval = {
			called: false,
			fromApp: {},
		};
		if (!window.mmsCore || typeof window.mmsCore[methodName] != 'function') {
			// Method does not exist
			if (MMSJS_ENABLE_PSEUDO_INTERFACES) {
				this.safeLog("mmsCore." + methodName + " is not present; using override");
			} else {
				// Method does not exist and pseudo interfaces are
				// not enabled; this is really bad!
				this.safeLog("mmsCore." + methodName + " is not present, and " +
					"MMS_JS_ENABLE_PSEUDO_INTERFACES is not enabled!!!");
				retval.called = true; // Prevent pseudo call
			}
		} else {
			retval.fromApp = window.mmsCore[methodName].apply(window.mmsCore, _arguments);
			retval.called = true;
		}
		return retval;
	},
	safeLog: function(message) {
		console.log(message);
		if (window.mmsCore && typeof window.mmsCore.log == 'function') {
			window.mmsCore.log(message);
		}
	},
};


// !module:mms_logging
// !dependency:mms_appinterfaces
// !dependency:mms_config

function mmsLog(severity, message) {
	if (!MMSJS_ENABLE_LOGGING) {
		return;
	}

	if (typeof message != 'string' || '' === message) {
		return false;
	}

	if (typeof severity != 'string' || '' === severity) {
		severity = "DEBUG";
	}

	mmsCoreImpl.log(severity + ": " + message);
}

function mmsLogDebug(message) {
	return mmsLog("DEBUG", message);
}

function mmsLogWarning(message) {
	return mmsLog("WARN", message);
}

function mmsLogError(message) {
	return mmsLog("ERROR", message);
}

function mmsLogInfo(message) {
	return mmsLog("INFO", message);
}

// !module:mms_tests
// !dependency:mms_appinterfaces

var mmsjsTests = {
	tests: [],
	run: function() {
		for (var n = 0; n < this.tests.length; n++) {
			mmsLogDebug("Running test: " + this.tests[n].name + "...");
			var success = this.tests[n].run();
			mmsLogDebug("Result: " + ((true === success) ? "success" : "FAILED"));
		}			
	},
	add: function(test) {
		this.tests.push(test);
	}
};

function runAllTests() {
	// Define test objects here
	var locTest = {
		name: 'String I18n',
		run: function () {
		    return true;
		}
	}

	mmsjsTests.add(locTest);
	mmsjsTests.run();
}

// !module:mms_views
// !dependency:mms_appinterfaces
// !dependency:mms_constants
// !dependency:mms_locale

/////////////////////////////////////////////////////////////////////
// View management
/////////////////////////////////////////////////////////////////////

function createMainView() {
	mmsLogInfo("Creating view: " + kViewIdentifierMain);
	createMainViewWidgets();
}

function createLoginView() {
	mmsLogInfo("Creating view: " + kViewIdentifierLogin);
	createLoginViewWidgets();
}

function switchToView(viewIdentifier) {
	var current = getCurrentView();

	if (current === viewIdentifier) {
		mmsLogDebug("Current view is already " + viewIdentifier)
		return current;
	}

	var retval = {};

	for (var n = 0; n < gViews.length; n++) {
		var view = $("#" + viewIdentifier);

		if (view.length && viewIdentifier == gViews[n]) {
			retval = view;
			view.show();
			setCurrentView(viewIdentifier);
		} else {
			var toHide = $("#" + gViews[n]);

			if (toHide.length)
				toHide.hide();
		}
	}

	if (!retval || !retval.length) {
		mmsLogError("No view found with id: " + viewIdentifier);
	} else {
		layoutDidChange(viewIdentifier);
		mmsLogDebug("Switched to view with id: " + viewIdentifier);
	}

	return retval;
}

function setCurrentView(viewIdentifier) {
	$(document).data(kCurrentViewData, viewIdentifier);
}

function getCurrentView() {
	return $(document).data(kCurrentViewData);
}

function switchToViewForSignInState(signedIn) {
	var targetViewId = signedIn ? kViewIdentifierMain : kViewIdentifierLogin;
	if (getCurrentView() != targetViewId) {
		switchToView(targetViewId);
	} else {
		mmsLogDebug("Current view is already: " + targetViewId);
	}
}

/////////////////////////////////////////////////////////////////////
// Main view widgets
/////////////////////////////////////////////////////////////////////

function createMainViewWidgets() {
	var containerMain = $("#" + kViewIdentifierMain);

	if (containerMain.length) {
		setDirectionForLocale(containerMain);		
		
		var containerContent = containerMain.find("#" + kContainerIdentifierContent);

		if (containerContent.length) {
			containerContent.empty();

			mmsLogDebug("Creating alerts...");

			var added = alertEntryController.addAlert(kAlertIdentifierCloudStorage,
				function() { return getAlertDetailsTitle(); },
				function() { return getAlertDetailsMessage(); },
				null /* no hyperlink */);

			if (!added) {
				mmsLogError("Failed to create alert entry for cloud storage!");
			}

			added = alertEntryController.addAlert(kAlertIdentifierLocalStorage,
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_PC_FULL); },
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_PC_FULL_DETAIL); });

			if (!added) {
				mmsLogError("Failed to create alert entry for PC storage!");
			}

			added = alertEntryController.addAlert(kAlertIdentifierPhotosExit,
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_EXIT_ICPL); },
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_EXIT_ICPL_DETAIL); },
				function() { mmsCoreImpl.doDownloadPhotos(); });

			if (!added) {
				mmsLogError("Failed to create alert entry for iCPL exit!");
			}

			added = alertEntryController.addAlert(kAlertIdentifierUpgradeRequired,
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_UPGRADE_REQUIRED); },
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_UPGRADE_REQUIRED_DETAIL); },
				function() { mmsCoreImpl.doOpenUpgradeiCloudWeb(); });

			if (!added) {
				mmsLogError("Failed to create alert entry for upgrade required!");
			}	
			
			added = alertEntryController.addAlert(kAlertIdentifierQuarkUpgradeRequired,
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_UPGRADE_REQUIRED); },
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_UPGRADE_REQUIRED_DETAIL); },
				function() { mmsCoreImpl.doOpenUpgradeiCloudWeb(); });

			if (!added) {
				mmsLogError("Failed to create alert entry for upgrade required!");
			}

			added = alertEntryController.addAlert(kAlertIdentifierAppStoreVersionAvailable,
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_APP_STORE_VERSION_AVAILABLE); },
				function() { return mmsCoreImpl.getLocalizedString(MMS_JS_LOC_APP_STORE_VERSION_AVAILABLE_DETAIL); },
				function() { mmsCoreImpl.doOpenAppStore(); });

			if (!added) {
				mmsLogError("Failed to create alert entry for App Store Version Available!");
			}			

			mmsLogDebug("Creating service entries...");
			added = serviceEntryController.addService(kServiceIdentifierPhotos, "service_logo_photos.png",
				mmsCoreImpl.getLocalizedString(MMS_JS_LOC_ICPL),
				mmsCoreImpl.getLocalizedString(MMS_JS_LOC_OPEN_ICPL),
				function() { mmsCoreImpl.doOpenPhotosFolder(); });

			if (!added) {
				mmsLogError("Failed to create service entry for iCPL!");
			}

			added = serviceEntryController.addService(kServiceIdentifierDrive, "service_logo_drive.png",
				mmsCoreImpl.getLocalizedString(MMS_JS_LOC_BR),
				mmsCoreImpl.getLocalizedString(MMS_JS_LOC_OPEN_BR),
				function() { mmsCoreImpl.doOpenDriveFolder(); });

			if (!added) {
				mmsLogError("Failed to create service entry for iCloud Drive!");
			}

			var containerButton = $('<div class="main_button_container"></div>');

			if (containerButton.length) {
				mmsLogDebug("Creating main view buttons...");
				createTopLevelButton(containerButton, kButtonIdentifierWeb,
					mmsCoreImpl.getLocalizedString(MMS_JS_LOC_ICLOUD_COM), true).click(function() {
					mmsCoreImpl.doOpenCastleWeb();
				});
				createTopLevelButton(containerButton, kButtonIdentifierSettings,
					mmsCoreImpl.getLocalizedString(MMS_JS_LOC_OPEN_SETTINGS), false).click(function() {
					mmsCoreImpl.doOpenCastlePref("");
				});

				containerContent.append(containerButton);	
			}	
		}

		containerMain.hide();
	}
}

function createLoginViewWidgets() {
	var containerLogin = $("#" + kViewIdentifierLogin);

	if (containerLogin.length) {
		setDirectionForLocale(containerLogin);
		var containerContent = containerLogin.find("#" + kContainerIdentifierContent);

		if (containerContent.length) {
			containerContent.empty();

			mmsLogDebug("Creating logo container...");

			var logoContainer = $('<div class="login_logo_container" align="center">' +
				'<img class="login_logo" src="login_logo.png"></img></div>');

			if (logoContainer.length) {
				var textWidget = $('<div class="login_message small_text text">' +
					mmsCoreImpl.getLocalizedString(MMS_JS_LOC_SIGN_IN_DETAIL) + '</div>');

				if (textWidget.length) {
					logoContainer.append(textWidget);
				}
				containerContent.append(logoContainer);
			}

			var containerButton = $('<div class="main_button_container"></div>');

			if (containerButton.length) {
				mmsLogDebug("Creating login view buttons...");
				createTopLevelButton(containerButton, kButtonIdentifierWeb,
					mmsCoreImpl.getLocalizedString(MMS_JS_LOC_ICLOUD_COM), true).click(function() {
					mmsCoreImpl.doOpenCastleWeb();
				});
				createTopLevelButton(containerButton, kButtonIdentifierSignIn,
					mmsCoreImpl.getLocalizedString(MMS_JS_LOC_SIGN_IN), false).click(function() {
					mmsCoreImpl.doOpenCastlePref();
				});
				containerContent.append(containerButton);
			}			
		}	

		containerLogin.hide();
	}
}

function createTopLevelButton(container, id, text, floatLeft) {
	var btn = $('<button type="button" id="' + id + '" class="main_button small_text">' + text + '</button>');

	if (btn.length) {
		btn.addClass(floatLeft === true ? "main_left_button" : "main_right_button");
		container.append(btn);
	}

	return btn;
}

function getMainViewContentContainer() {
	var mainView = $("#" + kViewIdentifierMain);
	var targetContainer = null;

	if (mainView.length) {
		targetContainer = mainView.find("#" + kContainerIdentifierContent);
	}

	if (!targetContainer.length) {
		mmsLogError("Failed to find target container: " + kContainerIdentifierContent +
			" as a child of: " + kViewIdentifierMain);
		return null;
	}

	return targetContainer;
}


// !module:mms_layout
// !dependency:mms_appinterfaces
// !dependency:mms_logging
// !dependency:mms_constants
// !dependency:mms_views

function layoutDidChange(viewIdentifier) {
	if (getCurrentView() === viewIdentifier) {
		var currentView = $("#" + viewIdentifier);
		if (currentView.length) {
			mmsCoreImpl.setViewportHeight(currentView.outerHeight());
		} else {
			mmsLogError("Couldn't obtain current view from id: " + viewIdentifier + "!");
		}
	} else {
		mmsLogDebug("Ignoring layout change for non-current view: " + viewIdentifier);
	}
}

function mainViewLayoutDidChange() {
	return layoutDidChange(kViewIdentifierMain);
}

function isjQueryElementVisible(elem) {
	if (elem && elem.length) {
		return elem.css('display') != 'none';
	}
	return false;
}

// !module:mms_basic_entry_controller
// !dependency:mms_layout

// Metadata associated with a basicEntry object
var basicEntryMetadata = {
	id: kInvalidIdentifier,		// The unique identifier of the entry
	leftBtn: {},				// entryButtonMetadata
	rightBtn: {},				// entryButtonMetadata
};

// Button metadata
var entryButtonMetadata = function(id, titleCb, clickCb, defButton) {
	this.id = id;
	this.titleCb = titleCb;
	this.clickCb = clickCb;
	this.defButton = (typeof(defButton) == 'boolean' ? defButton : false);
};

// A unique metadata/jQuery object pair.
var basicEntry = {
	metadata: {},				// The associated basicEntryMetadata object
	elem: {},					// The associated jQuery object
};

// Stores and controls pairs of jQuery objects and their
// associated metadata (basicEntry)
var basicEntryController = {
	entries: [],
	objType: kEntryTypeNone,

	// Instantiates a new basicEntryController and sets its object type
	create: function(objType) {
		var self = this;
		var newController = {};
		$.extend(newController, self);
		newController.objType = objType;
		return newController;
	},
	addEntry: function(entry) {
		var self = this;
		self.entries.push(entry);
		mmsLogDebug("Added entry of type: " + self.objType + "; (now have " + self.entries.length + ")");	
	},
	getEntry: function(id) {
		var self = this;
		for (var n = 0; n < self.entries.length; n++) {
			if (id === self.entries[n].metadata.id) {
				return self.entries[n];
			}
		}

		return null;
	},
	// Toggle the visibility of an entry.
	// Returns false if the entry can't be found.
	setEntryVisible: function(id, visible) {
		var self = this;
		var entry = self.getEntry(id);

		if (entry && entry.elem && entry.elem.length) {
			if (self.isEntryVisible(id) != visible) {
				if (visible) {
					entry.elem.show();
				} else {
					entry.elem.hide();
				}
				mainViewLayoutDidChange();
			} else {
				mmsLogDebug("Entry with id: " + id + " is already " + (visible ? "visible" : "hidden") + "; ignoring");
			}

			return true;
		}

		return false;
	},
	isEntryVisible: function(id) {
		var self = this;
		var entry = self.getEntry(id);

		if (entry && entry.elem && entry.elem.length) {
			return isjQueryElementVisible(entry.elem);
		}

		return false;
	},
};

function createEntryButtons(entry, containerClass, containerId, buttonClass, buttonLeftClass, buttonRightClass) {
	var success = false;
	if (entry && entry.elem) {
		var createButton = function(container, baseCssClass, cssClass, button) {
			var btnElem = $('<button type="button" id="' + cssClass + '" class="entry_button ' + cssClass + ' ' + baseCssClass +
				(button.defButton ? ' entry_button_default' : '') + ' small_text">' + button.titleCb() + '</button>');
			btnElem.click(button.clickCb);
			container.append(btnElem);
			return btnElem;
		};

		var container = $('<div id="' + containerId + '" class="' + containerClass + ' "></div>');

		if (container.length) {
			entry.elem.append(container);
			
			var leftButtonFullClassName;
			if (entry.metadata.leftBtn && !entry.metadata.rightBtn) {
				leftButtonFullClassName = buttonLeftClass;
			} else {
				leftButtonFullClassName = "entry_left_button " + buttonLeftClass;
			}

			if (createButton(container, buttonClass, leftButtonFullClassName, entry.metadata.leftBtn)) {
				if (entry.metadata.rightBtn) {
					if (createButton(container, buttonClass, "entry_right_button " + buttonRightClass, entry.metadata.rightBtn)) {
						// succeeded in creating both buttons
						success = true;
					}
				} else {
					// only needed to create one button
					success = true;
				}
			}
		}

		if (!success) {
			mmsLogError("Failed to create button(s) for entry with id: " + entry.metadata.id);
		}
	}

	return success;
}


// !module:mms_services
// !dependency:mms_basic_entry_controller
// !dependency:mms_appinterfaces
// !dependency:mms_layout
// !dependency:mms_locale

// Metadata associated with a service entry
var serviceEntryMetadata = $.extend({}, basicEntryMetadata);

serviceEntryMetadata.image = ""; 	// The path to the image file to use as the service's logo
serviceEntryMetadata.name = "";  	// The name of the service (e.g. "iCloud Photos")
serviceEntryMetadata.link = {
	title: "",						// The title of the hyperlink (e.g. "View on iCloud.com")
	cb: function() {},				// Callback to execute when the hyperlink is clicked
};

// Manages service entries
var serviceEntryController = basicEntryController.create(kEntryTypeService);

serviceEntryController.entries = [];

// Add a service entry; returns boolean success.
serviceEntryController.addService = function(serviceId, image, name, linkTitle, linkCb,
	leftBtnTitleCb, leftBtnCb, rightBtnTitleCb, rightBtnCb) {
	var self = this;

	if (self.getEntry(serviceId)) {
		mmsLogDebug("A service entry with id " + serviceId + " already exists!");
		return false;
	}

	var targetContainer = getMainViewContentContainer();

	if (!targetContainer)
		return false;

	var entry = $.extend({}, basicEntry);
	var metadata = $.extend({}, serviceEntryMetadata);

	metadata.id = serviceId;
	metadata.image = image;
	metadata.name = name;
	metadata.link.title = linkTitle;
	metadata.link.cb = linkCb;

	entry.metadata = metadata;
	entry.elem = createServiceEntryElem(targetContainer, entry);

	var success = false;

	if (entry.elem.length) {
		// Add buttons if applicable
		if (!leftBtnTitleCb || !leftBtnCb) {
			// All of these are required.
			mmsLogDebug("Not adding buttons for service with id: " + entry.metadata.id);
			success = true;
		} else {

			var left = "service_left_button";
			var right = "service_right_button";

			entry.metadata.leftBtn = new entryButtonMetadata(left, leftBtnTitleCb, leftBtnCb);
			if (rightBtnTitleCb && rightBtnCb) {
				entry.metadata.rightBtn = new entryButtonMetadata(right, rightBtnTitleCb, rightBtnCb);
			} else {
				entry.metadata.rightBtn = null;
			}

			var container = "service_button_container";
			success = createEntryButtons(entry, container, container, "service_button", left, right);
		}

		self.addEntry(entry);
		self.updateEntryVisibility(entry.metadata.id);
	}

	return success;
};

serviceEntryController.updateEntryStatusText = function(id) {
	var self = this;
	var entry = self.getEntry(id);

	if (!entry) {
		mmsLogDebug("Unable to locate a service entry with id: " + id);
	} else {
		updateServiceEntryStatusText(id, entry.elem);
	}	
};

serviceEntryController.updateEntryVisibility = function(id) {
	var self = this;
	var enabled = mmsCoreImpl.isServiceEnabled(id);

	if (enabled) {
		mmsLogDebug("Service with id: " + id + " is enabled; setting entry visible.");
	} else {
		mmsLogDebug("Service with id: " + id + " is disabled; setting entry hidden.");
	}

	return self.setEntryVisible(id, enabled);
};

function createServiceEntryElem(container, entry) {
	if (container.length) {
		var id = entry.metadata.id;
		var elem = $('<div id="' + id + '" class="service_container">' +
			'<div class="icon_container ' + getClassForLocale("icon_container") + '">' + 
			'<img class="icon" src="' + entry.metadata.image + '"></img></div>' + 
			'<div id="service_text_widget"' + 'class="service_text_widget ' +
			getClassForLocale("service_text_widget") + ' text">' + '<div class="' +
			getClassForLocale("service_title") + ' big_text">' + entry.metadata.name + '</div>' +
			'<div id="service_status"' + ' class="service_status ' + getClassForLocale("service_status") + ' small_text">' +
			'</div><div id="service_link_container" class="service_link_container ' +
			getClassForLocale("service_link_container")+ ' small_text"></div></div>');

		if (elem.length) {
			var link = $('<span id="' + id + '" class="service_link">' +
				entry.metadata.link.title + '</span>');

			if (link.length) {
				link.click(entry.metadata.link.cb);
				var widget = elem.find("div#service_link_container");

				if (widget.length) {
					widget.append(link);
				}
			}

			updateServiceEntryStatusText(id, elem);

			elem.data(kServiceEntryData, entry);
			container.append(elem);
			return elem;
		}
	}

	return null;
}

function updateServiceEntryStatusText(id, elem) {
	if (elem.length) {
		var isVisible = isjQueryElementVisible(elem);
		mmsLogDebug("Updating status text for " + (isVisible ? "visible" : "hidden") + " service with id: " + id);

		var result = mmsCoreImpl.getServiceStatusString(id);
		if (!result) {
			mmsLogError("Failed to retrieve status text for service with id: " + id);
			return;
		}

		var statusDiv = elem.find("div#service_status")
		if (statusDiv && statusDiv.length) {
			statusDiv.text(result);
		}
	}
}


// !module:mms_alerts
// !dependency:mms_appinterfaces
// !dependency:mms_basic_entry_controller
// !dependency:mms_locale

// Metadata associated with an alert
var alertEntryMetadata = $.extend({}, basicEntryMetadata);

alertEntryMetadata.titleCb = function() {};	// Callback to retrieve the title text
alertEntryMetadata.textCb = function() {};	// Callback to retrieve the detail text
alertEntryMetadata.linkCb = function() {};	// Callback to execute when the hyperlink is clicked

// Manages alert entries
var alertEntryController = basicEntryController.create(kEntryTypeAlert);

alertEntryController.entries = [];

// Add an alert entry; returns boolean success.
alertEntryController.addAlert = function(alertId, titleCb, textCb, linkCb) {
	var self = this;

	if (self.getEntry(alertId)) {
		mmsLogDebug("An alert entry with id " + alertId + " already exists!");
		return false;
	}

	var targetContainer = getMainViewContentContainer();

	if (!targetContainer)
		return false;

	var entry = $.extend({}, basicEntry);
	var metadata = $.extend({}, alertEntryMetadata);

	metadata.id = alertId;
	metadata.titleCb = titleCb;
	metadata.textCb = textCb;
	metadata.linkCb = linkCb;

	entry.metadata = metadata;
	entry.elem = createAlertEntryElem(targetContainer, entry);	

	if (entry.elem.length) {
		self.addEntry(entry);
		entry.elem.hide();
		success = true;
	}

	return success;
};

alertEntryController.showAlert = function(id, show) {
	var self = this;

	if (self.setEntryVisible(id, show)) {
		return true;
	}

	return false;
};

alertEntryController.updateAlertText = function(id) {
	var setTitle = false;
	var setDetail = false;
	var self = this;
	var alert = self.getEntry(id);

	if (alert && alert.elem) {
		var titleDiv = getAlertTitleDiv(alert.elem);
		if (titleDiv.length) {
			titleDiv.html(alert.metadata.titleCb());
			setTitle = true;
		}

		var detailDiv = getAlertDetailDiv(alert.elem);
		if (detailDiv.length) {
			detailDiv.html(alert.metadata.textCb());
			configureAlertEntryDetailSpan(getAlertEntryDetailSpan(detailDiv), alert);
			setDetail = true;
		}
	}

	return setTitle && setDetail;
};

alertEntryController.addButtonsToAlert = function(id, leftBtnId, leftBtnTitleCb,
	leftBtnCb, rightBtnId, rightBtnTitleCb, rightBtnCb, defaultBtnIdx) {
	var self = this;
	var alert = self.getEntry(id);
	var success = false;

	if (alert && alert.elem) {
		if (!leftBtnId || !leftBtnTitleCb || !leftBtnCb || !rightBtnId || !rightBtnTitleCb || !rightBtnCb) {
			mmsLogDebug("Can't add buttons for alert with id: " + alert.metadata.id + "; incomplete button data.");
		} else {
			var buttonContainer = getAlertEntryButtonContainer(alert.elem);
			if (buttonContainer.length) {
				mmsLogDebug("Alert with id: " + alert.metadata.id + " already has buttons; removing.");
				buttonContainer.remove();
			}
			alert.metadata.leftBtn = new entryButtonMetadata(leftBtnId, leftBtnTitleCb, leftBtnCb, defaultBtnIdx === 0);
			alert.metadata.rightBtn = new entryButtonMetadata(rightBtnId, rightBtnTitleCb, rightBtnCb, defaultBtnIdx === 1);

			mmsLogDebug("Adding buttons for alert with id: " + alert.metadata.id + "\n{\n\tleft: (id: " + alert.metadata.leftBtn.id + ", default: " +
				(alert.metadata.leftBtn.isDefault ? "true" : "false") + ") '" + alert.metadata.leftBtn.titleCb() +
				"'\n\tright: (id: " + alert.metadata.rightBtn.id + ", default: " + (alert.metadata.leftBtn.isDefault ? "true" : "false") + ") '" + 
				alert.metadata.rightBtn.titleCb() + "'\n}");

			var container = "alert_button_container";
			success = createEntryButtons(alert, container, container, "alert_button", "alert_left_button", "alert_right_button");
		}
	}

	return success;
}

function getAlertTitleDiv(elem) {
	if (elem && elem.length) {
		return elem.find("div.alert_title");
	}

	return null;
}

function getAlertDetailDiv(elem) {
	if (elem && elem.length) {
		return elem.find("div.alert_detail")
	}

	return null
}

function getAlertEntryDetailSpan(div) {
	if (div && div.length) {
		return div.children("span");
	}

	return null;
}

function getAlertEntryButtonContainer(elem) {
	if (elem && elem.length) {
		return elem.find("div.alert_button_container");
	}

	return null;
}

function getAlertEntryButton(div, btn) {
	if (div && div.length) {
		return div.find("button." + btn);
	}

	return null;
}

function getAlertEntryLeftButton(div) {
	return getAlertEntryButton(div, "alert_left_button");
}

function getAlertEntryRightButton(div) {
	return getAlertEntryButton(div, "alert_right_button");
}


function configureAlertEntryDetailSpan(span, entry) {
	if (span && span.length) {
		span.addClass("alert_detail_link").click(entry.metadata.linkCb);
		return true;
	}

	return false;
}

function createAlertEntryElem(container, entry) {
	if (container.length) {
		var alert = $('<div id="' + entry.metadata.id + '" class="alert_container">' +
			'<div class="icon_container ' + getClassForLocale("icon_container") + '">' +
			'<img class="icon" src="alert.png"></img></div>' + '<div class="alert_text_widget ' +
			getClassForLocale("alert_text_widget") + ' text"><div class="alert_title ' +
			getClassForLocale("alert_title") + ' big_text">' + entry.metadata.titleCb() +
			'</div><div class="alert_detail ' + getClassForLocale("alert_detail") +
			' small_text">' + entry.metadata.textCb() + '</div></div></div>');

		if (alert.length) {
			if (entry.metadata.linkCb) {
				configureAlertEntryDetailSpan(getAlertEntryDetailSpan(getAlertDetailDiv(alert)), entry);
			}
			alert.data(kAlertEntryData, entry);
			alert.prependTo(container);			
			return alert;
		}
	}

	return null;
}

//
// Helper functions for dynamic retrieval of alert details from C++ side.
// Note: id is current ignored by the C++ side, and is reserved for future use.
//
function alertDetailsHelper(/*id,*/ fn) {
	var details = mmsCoreImpl.getAlertDetails(/*id*/);
	return (details ? fn(details) : null);
}

function getAlertDetailsTitle(/*id*/) {
	return alertDetailsHelper(/*id,*/ function(details) {
		return details.title;
	});
}

function getAlertDetailsMessage(/*id*/) {
	return alertDetailsHelper(/*id,*/ function(details) {
		return details.message;
	});
}

function getAlertDetailsButtons(/*id*/) {
	return alertDetailsHelper(/*id,*/ function(details) {
		return details.buttons;
	});
}

function alertDetailsButtonHelper(/*id,*/ idx, fn) {
	return alertDetailsHelper(/*id,*/ function(details) {
		if (details.buttons && (details.buttons.length >= idx + 1)) {
			return fn(details.buttons[idx]);
		}

		return null;
	});
}

function getAlertDetailsButtonN(/*id,*/ idx) {
	return alertDetailsButtonHelper(/*id,*/ idx, function(button) {
		return button;
	});
}

function getAlertDetailsButtonTitleN(/*id,*/ idx) {
	var btn = getAlertDetailsButtonN(idx);
	if (btn) {
		return btn.title;
	}

	return "";
}

function getAlertDetailsButtonIdN(/*id,*/ idx) {
	var btn = getAlertDetailsButtonN(idx);
	if (btn) {
		return btn.id;
	}

	return idx.toString();
}

function getAlertDetailsButtonDefaultN(/*id,*/ idx) {
	var btn = getAlertDetailsButtonN(idx);
	if (btn) {
		return btn.isDefault;
	}

	return false;
}


// !module:mms_bridge
// !dependency:mms_services
// !dependency:mms_constants
// !dependency:mms_alerts

// Implements the main C++ -> JS interface
var jsBridge = {
	signInStateDidChange: function(signedIn) {
		mmsLogDebug("Sign in state changed: " + signedIn);
		if (signedIn) {
			switchToView(kViewIdentifierMain);
		} else {
			switchToView(kViewIdentifierLogin);
		}
	},
	serviceStateDidChange: function(serviceId) {
		mmsLogDebug("Service state change for service with id: " + serviceId);

		var toUpdate = [];
		if (kServiceIdentifierNone == serviceId) {
			toUpdate.push(kServiceIdentifierPhotos);
			toUpdate.push(kServiceIdentifierDrive);
		} else {
			if (kServiceIdentifierPhotos != serviceId && kServiceIdentifierDrive != serviceId) {
				mmsLogWarn("Unknown service id: " + serviceId);
				return;
			}

			toUpdate.push(serviceId);
		}

		for (var n = 0; n < toUpdate.length; n++) {
			var id = toUpdate[n];
			if ('number' === typeof(id)) {
				mmsLogDebug("Updating service entry with id: " + id);
				serviceEntryController.updateEntryStatusText(id);
				serviceEntryController.updateEntryVisibility(id);
			}
		}
	},
	showCloudStorageAlert: function(show) {
		if (show) {
			if (!alertEntryController.updateAlertText(kAlertIdentifierCloudStorage)) {
				mmsLogError("Failed to update text of cloud storage alert!");
			}

			var btnId0 = getAlertDetailsButtonIdN(0);
			var btn0 = {
				id: btnId0,
				titleCb: function() { return getAlertDetailsButtonTitleN(0); },
				clickCb: function() { mmsCoreImpl.alertButtonWasClicked(btnId0); },
				isDefault: getAlertDetailsButtonDefaultN(0),
			};

			var btnId1 = getAlertDetailsButtonIdN(1);
			var btn1 = {
				id: btnId1,
				titleCb: function() { return getAlertDetailsButtonTitleN(1); },
				clickCb: function() { mmsCoreImpl.alertButtonWasClicked(btnId1); },
				isDefault: getAlertDetailsButtonDefaultN(1),
			};

			if (!alertEntryController.addButtonsToAlert(kAlertIdentifierCloudStorage, btn0.id, btn0.titleCb,
				btn0.clickCb, btn1.id, btn1.titleCb, btn1.clickCb, (btn0.isDefault ? 0 : btn1.isDefault ? 1 : -1))) {
				mmsLogError("Failed to add buttons to cloud storage alert!");
			}			
		}
		if (!alertEntryController.showAlert(kAlertIdentifierCloudStorage, show)) {
			mmsLogError("Failed to toggle visibility of cloud storage alert!");
		}
	},
	showLocalStorageAlert: function(show) {
		if (!alertEntryController.showAlert(kAlertIdentifierLocalStorage, show)) {
			mmsLogError("Failed to toggle visibility of local storage alert!");
		}
	},
	showPhotosExitAlert: function(show) {
		if (show && !alertEntryController.updateAlertText(kAlertIdentifierPhotosExit)) {
			mmsLogError("Failed to update text of photos exit alert!");
		}			
		if (!alertEntryController.showAlert(kAlertIdentifierPhotosExit, show)) {
			mmsLogError("Failed to toggle visibility of photos exit alert!");
		}
	},
	showUpgradeRequiredAlert: function(show) {
		if (!alertEntryController.showAlert(kAlertIdentifierUpgradeRequired, show)) {
			mmsLogError("Failed to toggle visibility of upgrade required alert!");
		}		
	},
	showAppStoreVersionAvailableAlert: function(show) {
		if (!alertEntryController.showAlert(kAlertIdentifierAppStoreVersionAvailable, show)) {
			mmsLogError("Failed to toggle visibility of kAlertIdentifierAppStoreVersionAvailable!");
		}		
	}
};

/////////////////////////////////////////////////////////////////////
//
// JS module for MMS status window
//
// Copyright (C) 2015 Apple, Inc. All Rights Reserved.
//
/////////////////////////////////////////////////////////////////////

// !module:mms_main
// !dependency:mms_constants
// !dependency:mms_bridge
// !dependency:mms_alerts
// !dependency:mms_config

/////////////////////////////////////////////////////////////////////
// Globals
/////////////////////////////////////////////////////////////////////
var gViews = [kViewIdentifierLogin, kViewIdentifierMain];

$(function() {
	mmsLogInfo("jQuery loaded");

	if (MMSJS_ENABLE_TESTS) {
		mmsLogInfo("Tests are enabled; running...");
		runAllTests();
	} else {
		mmsLogInfo("Skipping tests");
	}
	
	mmsLogInfo("Creating views and widgets...");

	createMainView();
	createLoginView();

	if (MMSJS_ENABLE_POLLING_TIMER) {
		mmsLogDebug("Enabling UI update polling timer for " +
			MMSJS_POLLING_TIMER_INTERVAL + " msec");
	
		var pollingTimer = function() {
			// This runs every MMSJS_POLLING_TIMER_INTERVAL milliseconds,
			// and is used to poll the mmsCore interface for the current
			// state of things. This should be replaced with a more efficient
			// mechanism.
			var signedIn = mmsCoreImpl.isUserSignedIn();
			switchToViewForSignInState(signedIn);

			if (signedIn)
			{
				jsBridge.serviceStateDidChange(kServiceIdentifierPhotos);
				jsBridge.serviceStateDidChange(kServiceIdentifierDrive);

				if (alertEntryController.isEntryVisible(kAlertIdentifierPhotosExit)) {
					alertEntryController.updateAlertText(kAlertIdentifierPhotosExit);
				}
			} else {
				mmsLogDebug("Not signed in; NOOP.");
			}
		};

		pollingTimer();
		setInterval(pollingTimer, MMSJS_POLLING_TIMER_INTERVAL);
	} else {
		switchToViewForSignInState(mmsCoreImpl.isUserSignedIn());
	}

	mmsLogInfo("done initializing.");	
});
